<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    
    <servlet>
        <servlet-name>myWeb</servlet-name><!--中央调度器 叫 myWeb-->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--中央调度器不处理请求 只是转发的角色 又叫前端控制器 自己写的逻辑 叫做后端处理器-->
        <init-param><!--去这个路径下读取配置文件 从resource下面开始算起-->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

        <load-on-startup>1</load-on-startup>    <!--启动后创建对象的顺序-->
    </servlet>
    
    <servlet-mapping>
        <servlet-name>myWeb</servlet-name>
<!--        <url-pattern>*.do</url-pattern>-->
        <!--只要是.do结尾的 都交给中央调度器处理-->
        <url-pattern>/</url-pattern>
        <!--如果是/那么就是所有的请求都交给myWeb这个调度器处理
        结果就是静态资源是访问不到的 因为没有处理静态资源的能力
        那么我们需要配置一个专门做静态资源文件处理的调度器 在springmvc.xml文件中-->
    </servlet-mapping>

    <!--过滤器 用来解决post提交数据的的时候 中文乱码的问题-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    
    
</web-app>